1) 2bridge calculator OK
2) next double 2bridge calculator 
3) chains and walls calculator
4) already win calculator
5) momentum calculator 
6) vulnerable point (2bridge trying to be blocked)


To compute a move which implies a potential win, it could be implemented using weak constraint
on predicate "potentialWin" and a guess on an empty cell witch becomes instance of 
"response(X,Y)" and "cell(C,X,Y), control(C)" . Something like :

next(X,Y)| notNext(X,Y) :- cell(0,X,Y).

:- 1<> #count{X,Y:next(X,Y)}.

%update Java model
response(X,Y):- next(X,Y).

%this could be a problem
cell(C,X,Y):- next(X,Y).

%then compute "potentialWin" and then

:~ not potentialWin. [1@1]

%with this constraint the optimum is a winning move





